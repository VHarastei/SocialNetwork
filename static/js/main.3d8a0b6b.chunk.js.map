{"version":3,"sources":["assets/images/loading.svg","components/common/Preloader/Preloader.tsx","redux/peopleProfileReducer.ts","api/usersAPI.ts","redux/usersReducer.ts","api/chatAPI.ts","redux/chatReducer.ts","api/api.ts","api/securityAPI.ts","api/authAPI.ts","redux/authReducer.ts","components/SignInPage/SignInPage.tsx","components/NavBar/NavBar.tsx","redux/appReducer.ts","App.tsx","reportWebVitals.js","redux/reduxStore.ts","index.tsx","api/profileAPI.ts","redux/profileReducer.ts"],"names":["Preloader","src","loadingSVG","alt","SET_PEOPLE_PROFILE","SET_STATUS","initialState","profile","status","peopleProfileReducer","state","action","type","payload","actions","getPeopleProfile","userId","dispatch","profileAPI","getProfile","getStatus","Promise","all","then","deletePeopleProfile","usersAPI","currentPage","pageSize","term","friend","instanse","get","response","data","post","delete","TOGGLE_FOLLOWING","SET_USERS","SET_FILTER","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","filter","toggleFollowSucceded","setUsers","setFilter","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","requestUsers","a","items","totalCount","toggleFollow","followed","resultCode","usersReducer","map","u","id","ws","subscribers","messagesReceived","statusChanged","closeHandler","notifyStatus","console","log","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","message","send","MESSAGES_RECEIVED","STATUS_CHANGED","CLEAR_MESSAGES","messages","_newMessageHandler","newMessageHandlerCreactor","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","m","v1","index","arr","length","ResultCodesEnum","ResultCodeCaptchaEnum","axios","create","withCredentials","headers","baseURL","securityAPI","authAPI","email","password","rememberMe","captcha","SET_USER_DATA","SET_CAPTCHA_URL","userPhoto","login","isAuth","captchaUrl","getAuthUserData","Succes","getUserProfile","CaptchaIsRequired","—ÅaptchaUrl","url","authReducer","Copyright","Typography","variant","color","align","Link","href","loginSchema","Yup","shape","min","max","required","signInError","when","is","otherwise","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","card","cardContent","height","justifyContent","SignIn","classes","useSelector","auth","useDispatch","validationSchema","initialValues","onSubmit","formData","setStatus","errors","touched","Container","component","maxWidth","CssBaseline","className","Avatar","as","TextField","fullWidth","label","name","autoComplete","autoFocus","error","Boolean","helperText","FormControlLabel","control","Checkbox","Button","Box","mt","SignInErrorBox","Card","CardMedia","style","paddingTop","marginRight","marginLeft","image","title","CardContent","root","logo","userSelect","userName","tabs","NavBar","initialTabValue","path","useHistory","location","pathname","pathSymbols","split","item","splice","join","React","tabValue","setTabValue","photo","profilePage","photos","small","Paper","fontSize","Tabs","value","onChange","event","newTabValue","indicatorColor","textColor","centered","Tab","to","IconButton","onClick","edge","aria-label","INITIALIZED_SUCCES","initialized","appReducer","MyProfilePage","lazy","ChatPage","FindPeoplePage","Friends","App","this","props","initializeApp","fallback","exact","render","Component","compose","connect","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","profileReducer","peopleProfile","usersPage","chat","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","applyMiddleware","thunkMiddleware","store","createStore","createMuiTheme","primary","overrides","MuiButton","text","ReactDOM","document","getElementById","updateStatus","put","savePhoto","file","FormData","append","saveProfile","ADD_POST","SET_USER_PROFILE","SET_STATUS_ERROR","SAVE_PHOTO_SUCCESS","posts","likesCount","statusError","getState","newPost","newPostText"],"mappings":"2HAAe,G,KAAA,IAA0B,qCCO1BA,IAJO,WACpB,OAAO,qBAAKC,IAAKC,EAAYC,IAAI,c,kKCA7BC,EAAqB,iDACrBC,EAAa,yCAEbC,EAAe,CACnBC,QAAS,KACTC,OAAQ,IAOCC,EAAuB,WAGV,IAFtBC,EAEqB,uDAFbJ,EACRK,EACqB,uCACrB,OAAQA,EAAOC,MACb,KAAKR,EACH,OAAO,2BACFM,GADL,IAEEH,QAASI,EAAOJ,UAGpB,KAAKF,EACH,OAAO,2BACFK,GACAC,EAAOE,SAGd,QACE,OAAOH,IAIAI,EACO,SAACP,GAAD,MACf,CACCK,KAAMR,EACNG,YAJOO,EAMA,SAACN,GAAD,MACR,CACCI,KAAMP,EACNQ,QAAS,CAAEL,YAIJO,EAAmB,SAACC,GAAD,OAA+B,SAACC,GAC9D,IAAMV,EAAUW,IAAWC,WAAWH,GAChCR,EAASU,IAAWE,UAAUJ,GACpCK,QAAQC,IAAI,CAACf,EAASC,IAASe,MAAK,YAAwB,IAAD,mBAArBhB,EAAqB,KAAZC,EAAY,KACzDS,EAASH,EAAyBP,IAClCU,EAASH,EAAkBN,SAUlBgB,EAAsB,kBAAiB,SAACP,GACnDA,EAASH,EAAyB,OAClCG,EAASH,EAAkB,Q,0LC3DhBW,EAAW,WAC8D,IAA3EC,EAA0E,uDAA5D,EAAGC,EAAyD,uDAA9C,GAAIC,EAA0C,uDAAnC,GAAIC,EAA+B,uDAAN,KAC3E,OAAOC,IACJC,IAAkB,qBAAcL,EAAd,kBAAmCC,IAAcC,EAAK,SAAD,OAAWA,GAAQ,KAAmB,OAAXC,EAAA,kBAA4BA,GAAU,KACxIN,MAAK,SAACS,GAAD,OAAcA,EAASC,SAJtBR,EAAW,SAMfT,GACL,OAAOc,IAASI,KAAT,iBAAyClB,IAAUO,MAAK,SAACS,GAAD,OAAcA,EAASC,SAP7ER,EAAW,SASbT,GACP,OAAOc,IAASK,OAAT,iBAA2CnB,IAAUO,MAAK,SAACS,GAAD,OAAcA,EAASC,SCftFG,EAAmB,uCACnBC,EAAY,gCACZC,EAAa,iCACbC,EAAmB,uCACnBC,EAAwB,4CACxBC,EAAqB,yCACrBC,EAA+B,mDAEjCpC,EAAe,CACjBqC,MAAO,GACPhB,SAAU,GACViB,gBAAiB,EACjBlB,YAAa,EACbmB,YAAY,EACZC,oBAAqB,GACrBC,OAAQ,CACNnB,KAAM,GACNC,OAAQ,OAwDCf,EAAU,CACrBkC,qBAAsB,SAAChC,GAAD,MACnB,CACCJ,KAAMwB,EACNpB,WAEJiC,SAAU,SAACN,GAAD,MAA6B,CAAE/B,KAAMyB,EAAWM,UAC1DO,UAAW,SAACH,GAEV,MAAO,CAAEnC,KAAM0B,EAAYS,WAC7BI,eAAgB,SAACzB,GAAD,MACb,CACCd,KAAM2B,EACNb,gBAEJ0B,mBAAoB,SAACR,GAAD,MACjB,CACChC,KAAM4B,EACNI,oBAEJS,iBAAkB,SAACR,GAAD,MACf,CACCjC,KAAM6B,EACNI,eAEJS,wBAAyB,SAACT,EAAqB7B,GAAtB,MACtB,CACCJ,KAAM8B,EACNG,aACA7B,YAIOuC,EAAe,SAC1B7B,EACAC,EACAoB,GAH0B,8CAIZ,WAAO9B,GAAP,eAAAuC,EAAA,6DACdvC,EAASH,EAAQoC,UAAUH,IAC3B9B,EAASH,EAAQqC,eAAezB,IAEhCT,EAASH,EAAQuC,kBAAiB,IAJpB,SAKK5B,EAAkBC,EAAaC,EAAUoB,EAAOnB,KAAMmB,EAAOlB,QALlE,OAKRI,EALQ,OAMdhB,EAASH,EAAQuC,kBAAiB,IAElCpC,EAASH,EAAQmC,SAAShB,EAAKwB,QAC/BxC,EAASH,EAAQsC,mBAAmBnB,EAAKyB,aAT3B,2CAJY,uDAgBfC,EAAe,SAAC3C,EAAgB4C,GAAjB,8CAAkD,WAAO3C,GAAP,SAAAuC,EAAA,yDAC5EvC,EAASH,EAAQwC,yBAAwB,EAAMtC,KACpC4C,EAFiE,gCAEhDnC,EAAkBT,GAF8B,0DAEdS,EAAgBT,GAFF,2BAGpD,IAHoD,KAGnE6C,YACP5C,EAASH,EAAQkC,qBAAqBhC,IAExCC,EAASH,EAAQwC,yBAAwB,EAAOtC,IAN4B,4CAAlD,uDASb8C,IA3GI,WAAmE,IAAlEpD,EAAiE,uDAAzDJ,EAAcK,EAA2C,uCACnF,OAAQA,EAAOC,MACb,KAAKwB,EACH,OAAO,2BACF1B,GADL,IAEEiC,MAAOjC,EAAMiC,MAAMoB,KAAI,SAACC,GACtB,OAAIA,EAAEC,KAAOtD,EAAOK,OACX,2BAAKgD,GAAZ,IAAeJ,UAAWI,EAAEJ,WAEvBI,OAGb,KAAK3B,EACH,OAAO,2BACF3B,GADL,IAEEiC,MAAM,YAAKhC,EAAOgC,SAEtB,KAAKJ,EACH,OAAO,2BACF7B,GADL,IAEEgB,YAAaf,EAAOe,cAExB,KAAKc,EACH,OAAO,2BACF9B,GADL,IAEEkC,gBAAiBjC,EAAOiC,kBAE5B,KAAKH,EACH,OAAO,2BACF/B,GADL,IAEEmC,WAAYlC,EAAOkC,aAEvB,KAAKH,EACH,OAAO,2BACFhC,GADL,IAEEoC,oBAAqBnC,EAAOkC,WAAP,sBACbnC,EAAMoC,qBADO,CACcnC,EAAOK,SACtCN,EAAMoC,oBAAoBC,QAAO,SAACkB,GAAD,OAAQA,IAAOtD,EAAOK,YAE/D,KAAKsB,EACH,OAAO,2BACF5B,GADL,IAEEqC,OAAQpC,EAAOoC,SAEnB,QACE,OAAOrC,K,2LC5DTwD,EAAuB,KACrBC,EAAc,CAClBC,iBAAkB,GAClBC,cAAe,IAGXC,EAAe,WACnBC,EAAa,WACbC,QAAQC,IAAI,iBACZC,WAAWC,EAAe,MAEtBC,EAAiB,SAACC,GACtB,IAAMC,EAAcC,KAAKC,MAAMH,EAAE5C,MACjCkC,EAAW,iBAAqBc,SAAQ,SAACC,GAAD,OAAOA,EAAEJ,OAE7CK,EAAc,SAACN,GACnBN,EAAa,UAETa,EAAe,SAACP,GACpBN,EAAa,UAGTc,EAAU,WAAO,IAAD,QAClB,QAAF,EAAAnB,SAAA,SAAIoB,oBAAoB,QAAShB,GAC/B,QAAF,EAAAJ,SAAA,SAAIoB,oBAAoB,UAAWV,GACjC,QAAF,EAAAV,SAAA,SAAIoB,oBAAoB,OAAQH,GAC9B,QAAF,EAAAjB,SAAA,SAAIoB,oBAAoB,QAASF,IAG7Bb,EAAe,SAAC/D,GACpB2D,EAAW,cAAkBc,SAAQ,SAACC,GAAD,OAAOA,EAAE1E,OAG1CmE,EAAgB,WAAO,IAAD,EACxB,QAAF,EAAAT,SAAA,SAAIqB,QACJF,IACAnB,EAAK,IAAIsB,UAAU,gEACnBjB,EAAa,WACbL,EAAGuB,iBAAiB,QAASnB,GAC7BJ,EAAGuB,iBAAiB,UAAWb,GAC/BV,EAAGuB,iBAAiB,OAAQN,GAC5BjB,EAAGuB,iBAAiB,QAASL,IAGlBM,EACA,SACTC,EACAC,GAIA,OADAzB,EAAYwB,GAAWE,KAAKD,GACrB,WAELzB,EAAYwB,GAAaxB,EAAYwB,GAAW5C,QAAO,SAACmC,GAAD,OAAOA,IAAMU,OAT7DF,EAYE,SACXC,EACAC,GAGAzB,EAAYwB,GAAaxB,EAAYwB,GAAW5C,QAAO,SAACmC,GAAD,OAAOA,IAAMU,MAjB3DF,EAmBE,SAACI,GAAqB,IAAD,EAC9B,QAAF,EAAA5B,SAAA,SAAI6B,KAAKD,IApBAJ,EAsBJ,WACLf,KAvBSe,EAyBL,WAAO,IAAD,EACVvB,EAAW,iBAAuB,GAClCA,EAAW,cAAoB,GAE7B,QAAF,EAAAD,SAAA,SAAIqB,QACJF,KCnFEW,EAAoB,uCACpBC,EAAiB,oCACjBC,EAAiB,oCAInB5F,EAAe,CACjB6F,SAAU,GACV3F,OAAQ,WAgCGM,EACM,SAACqF,GAAD,MACd,CACCvF,KAAMoF,EACNnF,QAAS,CAAEsF,cAJJrF,EAMI,iBACZ,CACCF,KAAMsF,IARCpF,EAUI,SAACN,GAAD,MACZ,CACCI,KAAMqF,EACNpF,QAAS,CAAEL,YAIb4F,EAAwE,KACtEC,EAA4B,SAACpF,GAQjC,OAP2B,OAAvBmF,EACFA,EAAqB,SAACD,GACpBlF,EAASH,EAAwBqF,KAGnClF,EAASH,EAAwB,KAE5BsF,GAGLE,EAA+D,KAC7DC,EAA8B,SAACtF,GAMnC,OAL8B,OAA1BqF,IACFA,EAAwB,SAAC9F,GACvBS,EAASH,EAAsBN,MAG5B8F,GAGIE,EAAyB,yDAAiB,WAAOvF,GAAP,SAAAuC,EAAA,sDACrDkC,EAAkB,mBAAoBW,EAA0BpF,IAChEyE,EAAkB,gBAAiBa,EAA4BtF,IAC/DyE,IAHqD,2CAAjB,uDAMzBe,EAAwB,yDAAiB,WAAOxF,GAAP,SAAAuC,EAAA,sDACpDkC,EAAoB,mBAAoBW,EAA0BpF,IAClEyE,EAAoB,gBAAiBa,EAA4BtF,IACjEA,EAASH,KACT4E,IAJoD,2CAAjB,uDAMxBgB,EAAc,SAACZ,GAAD,8CAAgC,WAAO7E,GAAP,SAAAuC,EAAA,sDACzDkC,EAAoBI,GADqC,2CAAhC,uDAIZa,IAhFG,WAAmE,IAAlEjG,EAAiE,uDAAzDJ,EAAcK,EAA2C,uCAClF,OAAQA,EAAOC,MACb,KAAKoF,EACH,OAAO,2BACFtF,GADL,IAEEyF,SAAU,sBACLzF,EAAMyF,UADD,YAELxF,EAAOE,QAAQsF,SAASpC,KAAI,SAAC6C,GAAD,mBAAC,eAAYA,GAAb,IAAgB3C,GAAI4C,qBACnD9D,QAAO,SAAC6D,EAAGE,EAAOC,GAAX,OAAmBD,GAASC,EAAIC,OAAS,SAEtD,KAAKd,EACH,OAAO,2BACFxF,GADL,IAEEyF,SAAU,KAEd,KAAKF,EACH,OAAO,2BACFvF,GADL,IAEEF,OAAQG,EAAOE,QAAQL,SAE3B,QACE,OAAOE,K,gCCxCb,0GAUYuG,EAKAC,EAfZ,SAEapF,EAFb,OAEwBqF,EAAMC,OAAO,CACnCC,iBAAiB,EACjBC,QAAS,CACP,UAAW,wCAEbC,QAAS,mD,SAGCN,O,mBAAAA,I,kBAAAA,M,cAKAC,O,2CAAAA,M,ucCRCM,EAAc,WAEvB,OAAO1F,IAASC,IAAT,4BAA0DR,MAAK,SAACS,GAAD,OAAcA,EAASC,SCGpFwF,EAAU,WAEnB,OAAO3F,IAASC,IAAT,WAAuDR,MAAK,SAACS,GAAD,OAAcA,EAASC,SAFjFwF,EAAU,SAIfC,EAAeC,GAAwE,IAAtDC,EAAqD,wDAAjCC,EAAiC,uDAAvB,KACnE,OAAO/F,IACJI,KADI,aACoF,CACvFwF,QACAC,WACAC,aACAC,YAEDtG,MAAK,SAACS,GAAD,OAAcA,EAASC,SAZtBwF,EAAU,WAenB,OAAO3F,IAASK,OAAT,cAA8BZ,MAAK,SAACS,GAAD,OAAcA,EAASC,S,QCpB/D6F,EAAgB,mCAChBC,EAAkB,qCAEpBzH,EAAe,CACjBU,OAAQ,KACRgH,UAAW,KACXC,MAAO,KACPP,MAAO,KACPQ,QAAQ,EACRC,WAAY,MAoBDrH,EACM,SACfE,EACA0G,EACAO,EACAC,GAJe,MAMd,CACCtH,KAAMkH,EACNjH,QAAS,CAAEG,SAAQ0G,QAAOO,QAAOC,YAT1BpH,EAWI,SAACqH,GAAD,MAAgC,CAC7CvH,KAAMmH,EACNlH,QAAS,CAAEsH,gBAUFC,EAAkB,yDAAiD,WAC9EnH,GAD8E,uBAAAuC,EAAA,sEAG3DiE,IAH2D,cAGxExF,EAHwE,QAIrE4B,aAAeoD,IAAgBoB,SAAS,EACpBpG,EAAKA,KAA1BgC,EADwC,EACxCA,GAAIyD,EADoC,EACpCA,MAAOO,EAD6B,EAC7BA,MACjBhH,EAASH,EAAwBmD,EAAIyD,EAAOO,GAAO,IACnDhH,EAASqH,YAAerE,KAPoD,kBASvEhC,GATuE,2CAAjD,uDAiBlBgG,EAAQ,SACnBP,EACAC,EACAC,EACAC,GAJmB,8CAK8B,WAAO5G,GAAP,eAAAuC,EAAA,sEAC9BiE,EAAcC,EAAOC,EAAUC,EAAYC,GADb,cAC3C5F,EAD2C,QAExC4B,aAAeoD,IAAgBoB,QACtCpH,EAASmH,KAEPnG,EAAK4B,aAAeqD,IAAsBqB,mBAC5CtH,EAhByB,uCAAiB,WAAOA,GAAP,eAAAuC,EAAA,sEACnBgE,IADmB,OACtCgB,EADsC,OAE5CvH,EAASH,EAAsB0H,EAAWC,MAFE,2CAAjB,uDAUsB,kBAQ1CxG,EAAKkE,SAAS,IAR4B,2CAL9B,uDAwBNuC,EA7EG,WAAmE,IAAlEhI,EAAiE,uDAAzDJ,EAAcK,EAA2C,uCAClF,OAAQA,EAAOC,MACb,KAAKkH,EACL,KAAKC,EACH,OAAO,2BACFrH,GACAC,EAAOE,SAEd,QACE,OAAOH,ICRb,SAASiI,IACP,OACE,eAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,MAAM,SAAxD,UACG,kBACD,cAACC,EAAA,EAAD,CAAMF,MAAM,UAAUG,KAAK,+BAA3B,gBAGC,YAKP,IAAMC,EAAcC,MAAaC,MAAM,CACrCzB,SAAUwB,MAAaE,IAAI,EAAG,cAAcC,IAAI,GAAI,aAAaC,SAAS,YAC1E7B,MAAOyB,MAAazB,MAAM,iBAAiB6B,SAAS,YACpDC,YAAaL,MACbtB,QAASsB,MAAaM,KAAK,cAAe,CACxCC,GAAI,SAAC7B,GAAD,OAAkBA,GACtBtG,KAAM4H,MAAaI,SAAS,YAC5BI,UAAWR,UAITS,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,OAAQ,CACNC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQC,UAAUC,MAE3CC,KAAM,CACJC,MAAO,OACPZ,UAAWF,EAAMG,QAAQ,IAE3BY,OAAQ,CACNP,OAAQR,EAAMG,QAAQ,EAAG,EAAG,IAE9Ba,KAAM,CACJP,gBAAiB,WAEnBQ,YAAa,CACXC,OAAQ,OACRd,QAAS,OACTE,WAAY,SACZa,eAAgB,cAgBL,SAASC,KACtB,IAAMC,EAAUvB,KACVzB,EAAaiD,aAAY,SAAC1K,GAAD,OAAyBA,EAAM2K,KAAKlD,cAE7DlH,EAAWqK,cAEjB,OACE,cAAC,IAAD,CACEC,iBAAkBrC,EAClBsC,cAAe,CAAE9D,MAAO,GAAIC,SAAU,GAAIC,YAAY,EAAOC,QAAS,IACtE4D,SAAQ,uCAAE,WAAOC,EAAP,oBAAAlI,EAAA,6DAAmBmI,EAAnB,EAAmBA,UAAnB,SACgB1K,EACtBgH,EAAMyD,EAAShE,MAAOgE,EAAS/D,SAAU+D,EAAS9D,WAAY8D,EAAS7D,UAFjE,QACJ2B,EADI,SAIWmC,EAAU,CAAEnC,gBAJvB,2CAAF,wDAHV,SAUG,gBAAGoC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,IAAoBrL,cAApB,MAA6B,CAAEgJ,YAAa,MAA5C,SACC,eAACsC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,UACE,cAACC,EAAA,EAAD,IACA,sBAAKC,UAAWf,EAAQpB,MAAxB,UACE,cAACoC,EAAA,EAAD,CAAQD,UAAWf,EAAQd,OAA3B,SACE,cAAC,IAAD,MAEF,cAACzB,EAAA,EAAD,CAAYmD,UAAU,KAAKlD,QAAQ,KAAnC,qBAGA,eAAC,IAAD,CAAMqD,UAAWf,EAAQR,KAAzB,UACE,cAAC,IAAD,CACE7B,MAAM,UACNsD,GAAIC,IACJxD,QAAQ,WACRyB,OAAO,SACPf,UAAQ,EACR+C,WAAS,EACTrI,GAAG,QACHsI,MAAM,gBACNC,KAAK,QACLC,aAAa,QACbC,WAAS,EACTC,MAAOC,QAAQhB,EAAOlE,OACtBmF,WAAYhB,EAAQnE,MAAQkE,EAAOlE,MAAQ,KAE7C,cAAC,IAAD,CACEoB,MAAM,UACNsD,GAAIC,IACJxD,QAAQ,WACRyB,OAAO,SACPf,UAAQ,EACR+C,WAAS,EACTE,KAAK,WACLD,MAAM,WACN3L,KAAK,WACLqD,GAAG,WACHwI,aAAa,mBACbE,MAAOC,QAAQhB,EAAOjE,UACtBkF,WAAYhB,EAAQlE,SAAWiE,EAAOjE,SAAW,KAEnD,cAAC,IAAD,CACEyE,GAAIU,IACJN,KAAK,aACLO,QAAS,cAACC,EAAA,EAAD,CAAUlE,MAAM,YACzByD,MAAM,gBAER,cAAC,GAAD,CAAgBpE,WAAYA,EAAYqB,YAAahJ,EAAOgJ,cAE5D,cAACyD,EAAA,EAAD,CACErM,KAAK,SACLkI,MAAM,YACND,QAAQ,YACRyD,WAAS,EACTJ,UAAWf,EAAQN,OALrB,2BAWJ,cAACqC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAACxE,EAAD,YAaZ,IAAMyE,GAA2C,SAAC,GAAiC,IAA/BjF,EAA8B,EAA9BA,WAAYqB,EAAkB,EAAlBA,YACxD2B,EAAUvB,KAEhB,OAAOzB,EACL,eAAC+E,EAAA,EAAD,WACE,cAACG,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,MAAO,CACLvC,OAAQ,EACRwC,WAAY,MACZC,YAAa,MACbC,WAAY,OAEdC,MAAOxF,EACPyF,MAAM,cAGV,cAAC,IAAD,CACE9E,MAAM,UACNsD,GAAIC,IACJxD,QAAQ,WACRyB,OAAO,SACPf,UAAQ,EACR+C,WAAS,EACTrI,GAAG,UACHsI,MAAM,UACNC,KAAK,UACL5L,KAAK,OACL+L,MAAOnD,EACPqD,WAAY,gBAIhBrD,GACE,cAAC6D,EAAA,EAAD,CAAMnB,UAAWf,EAAQL,KAAzB,SACE,cAAC+C,EAAA,EAAD,CAAa3B,UAAWf,EAAQJ,YAAhC,SACE,cAACnC,EAAA,EAAD,CAAYG,MAAM,SAASgD,UAAU,KAAKlD,QAAQ,KAAlD,SACGW,S,oGC1MPI,GAAYC,YAAW,CAC3BiE,KAAM,CACJ5D,QAAS,OACTe,eAAe,gBACfb,WAAY,SACZE,OAAQ,UAEVyD,KAAM,CACJ7D,QAAS,SACT8D,WAAY,QAEd/F,MAAO,CACLiC,QAAS,OACTE,WAAY,SACZa,eAAe,iBAEjBgD,SAAU,CACR/D,QAAS,SACTpB,MAAO,OACPwB,OAAQ,gBAEVD,OAAQ,CACNvB,MAAO,OACPyB,gBAAiB,WAEnB2D,KAAM,CACJT,aAAc,OAILU,GAAS,WACpB,IAAMhD,EAAUvB,KAEZwE,EAAkB,EAClBC,EAAOC,cAAaC,SAASC,SAE7BC,EAAcJ,EAAKK,MAAM,IAC7BD,EAAYxJ,SAAQ,SAAC0J,EAAM7H,GACZ,MAAT6H,GAA0B,IAAV7H,GAClB2H,EAAYG,OAAO9H,MAGvBuH,EAAOI,EAAYI,KAAK,IAEV,CAAC,WAAY,QAAS,WAAY,WACxC5J,SAAQ,SAAC0J,EAAM7H,GACjB6H,IAASN,IAAMD,EAAkBtH,MAhBb,MAmBMgI,WAAeV,GAnBrB,oBAmBnBW,EAnBmB,KAmBTC,EAnBS,KAoBpB/G,EAAQmD,aAAY,SAAC1K,GAAD,OAAyBA,EAAM2K,KAAKpD,SACxDgH,EAAQ7D,aAAY,SAAC1K,GAAD,uBAAyBA,EAAMwO,YAAY3O,eAA3C,aAAyB,EAA2B4O,OAAOC,SAM/EnO,EAAWqK,cAMjB,OACE,cAAC+D,GAAA,EAAD,CAAOvG,MAAM,YAAb,SACE,sBAAKoD,UAAWf,EAAQ2C,KAAxB,UACE,cAAC,KAAD,CACEhF,MAAM,YACNoD,UAAWf,EAAQ4C,KACnBR,MAAO,CAAE+B,SAAU,MAGrB,eAACC,GAAA,EAAD,CACCrD,UAAWf,EAAQ+C,KAClBsB,MAAOT,EACPU,SAtBa,SAACC,EAA8BC,GAClDX,EAAYW,IAsBNC,eAAe,YACfC,UAAU,YACVC,UAAQ,EANV,UAQE,cAACC,GAAA,EAAD,CAAKxD,MAAM,OAAOyD,GAAG,WAAWjE,UAAW/C,OAC3C,cAAC+G,GAAA,EAAD,CAAKxD,MAAM,OAAOyD,GAAG,QAAQjE,UAAW/C,OACxC,cAAC+G,GAAA,EAAD,CAAKxD,MAAM,UAAUyD,GAAG,WAAWjE,UAAW/C,OAC9C,cAAC+G,GAAA,EAAD,CAAKxD,MAAM,cAAcyD,GAAG,UAAUjE,UAAW/C,UAEnD,eAACkE,EAAA,EAAD,CAAKhB,UAAWf,EAAQlD,MAAxB,UACE,cAACkE,EAAA,EAAD,CAAQD,UAAWf,EAAQd,OAAQlK,IAAK8H,EAAOhI,IAAKgP,EAApD,SACGhH,EAAM,KAET,cAACW,EAAA,EAAD,CAAYsD,UAAWf,EAAQ8C,SAAUpF,QAAQ,KAAjD,SACGZ,IAEH,cAACgI,GAAA,EAAD,CAAYC,QAjCD,WACjBjP,EFkBkB,uCAAiB,WAAOA,GAAP,SAAAuC,EAAA,sEAClBiE,IADkB,OAEb,IAFa,OAE5B5D,aACP5C,EAASH,EAAwB,KAAM,KAAM,MAAM,IACnDG,EAASH,EAAsB,QAJI,2CAAjB,wDEcqBqP,KAAK,QAAQC,aAAW,OAAzD,SACE,cAAC,KAAD,CAAetH,MAAM,yBCtG3BuH,GAAqB,uCAEvB/P,GAAe,CACjBgQ,aAAa,GAmBFxP,GACQ,iBAAO,CACxBF,KAAMyP,KASKE,GAvBE,WAAmE,IAAlE7P,EAAiE,uDAAzDJ,GAAcK,EAA2C,uCACjF,OAAQA,EAAOC,MACb,KAAKyP,GACH,OAAO,2BACF3P,GADL,IAEE4P,aAAa,IAEjB,QACE,OAAO5P,ICbP8P,GAAgB1B,IAAM2B,MAAK,kBAAM,uDACjCC,GAAW5B,IAAM2B,MAAK,kBAAM,iCAC5BE,GAAiB7B,IAAM2B,MAAK,kBAAM,8DAClCG,GAAU9B,IAAM2B,MAAK,kBAAM,uDAM3BI,G,kLAEFC,KAAKC,MAAMC,kB,+BAIX,OAAKF,KAAKC,MAAMT,YAGXQ,KAAKC,MAAM7I,OAId,sBAAKgE,UAAU,cAAf,UACE,cAAC,GAAD,IACA,cAAC,WAAD,CAAU+E,SAAU,cAACjR,EAAA,EAAD,IAApB,SACE,qBAAKkM,UAAU,sBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmC,KAAK,IAAI6C,OAAK,EAArB,SACE,cAAC,IAAD,CAAUlB,GAAG,eAEf,cAAC,IAAD,CAAO3B,KAAK,oBAAoB8C,OAAQ,kBAAM,cAACX,GAAD,OAC9C,cAAC,IAAD,CAAOnC,KAAK,QAAQ8C,OAAQ,kBAAM,cAACT,GAAD,OAClC,cAAC,IAAD,CAAOrC,KAAK,oBAAoB8C,OAAQ,kBAAM,cAACP,GAAD,OAC9C,cAAC,IAAD,CAAQvC,KAAK,mBAAmB8C,OAAQ,kBAAM,cAACR,GAAD,OAE9C,cAAC,IAAD,CAAOtC,KAAK,IAAI8C,OAAQ,kBAAM,8DAhB/B,cAACjG,GAAD,IAHA,cAAClL,EAAA,EAAD,Q,GAPK8O,IAAMsC,WAyCTC,eAAQC,aALC,SAAC5Q,GAAD,MAA0B,CAChD4P,YAAa5P,EAAM6Q,IAAIjB,YACvBpI,OAAQxH,EAAM2K,KAAKnD,UAG2B,CAAE8I,cD3BrB,yDAAiB,WAAO/P,GAAP,SAAAuC,EAAA,sEACtCvC,EAASmH,KAD6B,OAE5CnH,EAASH,MAFmC,2CAAjB,wDC2BNwQ,CAA4CT,KChDpDW,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnQ,MAAK,YAAkD,IAA/CoQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,wCCGVO,GAAcC,YAAgB,CAChC/C,YAAagD,IACbC,cAAe1R,KACf2R,UAAWtO,KACXuH,KAAM3C,EACN6I,IAAKhB,GACL8B,KAAM1L,OAiBF2L,IALc,kBAAXC,QAAuBA,OAAOC,qCAEjCD,OAAOC,qCAAqC,IAC5CnB,KAE4BoB,YAAgBC,OAKnCC,GAJDC,YAAYZ,GAAaM,I,oBCvB1BxI,GAAQ+I,aAAe,CAClCrI,QAAS,CACPsI,QAAS,CACPpI,KAAM,WAGRD,UAAW,CACTC,KAAM,YAKVqI,UAAW,CAETC,UAAW,CAETC,KAAM,CAEJnK,MAAO,WAOfoK,IAAS/B,OACP,cAAC,KAAD,UACE,cAAC,IAAD,CAAUwB,MAAOA,GAAjB,SACA,cAAC,KAAD,CAAkB7I,MAAOA,GAAzB,SACE,cAAC,GAAD,UAIJqJ,SAASC,eAAe,SAE1B5B,M,gCC7CA,8CAMatQ,EAAa,CACxBC,WADwB,SACbH,GACT,OAAOc,IAASC,IAAT,kBAAqCf,IAAUO,MAAK,SAACS,GAAD,OAAcA,EAASC,SAGpFb,UALwB,SAKdJ,GACR,OAAOc,IAASC,IAAT,yBAAuCf,IAAUO,MAAK,SAACS,GAAD,OAAcA,EAASC,SAEtFoR,aARwB,SAQX7S,GACX,OAAOsB,IAASwR,IAAT,iBAAgD,CAAE9S,WAAUe,MAAK,SAACS,GAAD,OAAcA,EAASC,SAEjGsR,UAXwB,SAWdC,GACR,IAAM9H,EAAW,IAAI+H,SAErB,OADA/H,EAASgI,OAAO,QAASF,GAClB1R,IACJwR,IADI,gBACiD5H,EAAU,CAC9DpE,QAAS,CACP,eAAgB,yBAGnB/F,MAAK,SAACS,GAAD,OAAcA,EAASC,SAEjC0R,YAtBwB,SAsBZpT,GACV,OAAOuB,IAASwR,IAAT,UAAyC/S,GAASgB,MAAK,SAACS,GAAD,OAAcA,EAASC,W,6PC1BnF2R,EAAW,iCACXC,EAAmB,yCACnBxT,EAAa,mCACbyT,EAAmB,yCACnBC,EAAqB,2CAErBzT,EAAe,CACnB0T,MAAO,CACL,CAAE/P,GAAI,EAAG6B,QAAS,WAAYmO,WAAY,GAC1C,CAAEhQ,GAAI,EAAG6B,QAAS,SAAUmO,WAAY,GACxC,CAAEhQ,GAAI,EAAG6B,QAAS,cAAemO,WAAY,GAC7C,CAAEhQ,GAAI,EAAG6B,QAAS,aAAcmO,WAAY,IAE9C1T,QAAS,KACTC,OAAQ,GACR0T,YAAa,IA6CFpT,EAMK,SAACP,GAAD,MACb,CACCK,KAAMiT,EACNtT,YATOO,EAWA,SAACN,GAAD,MACR,CACCI,KAAMP,EACNQ,QAAS,CAAEL,YAdJM,EAgBK,SAACoT,GAAD,MACb,CACCtT,KAAMkT,EACNjT,QAAS,CAAEqT,iBAnBJpT,EAqBO,SAACqO,GAAD,MACf,CACCvO,KAAMmT,EACN5E,WAIO7G,EAAiB,SAACtH,GAAD,8CAA+B,WAAOC,GAAP,eAAAuC,EAAA,sEACxCtC,IAAWC,WAAWH,GADkB,OACrDiB,EADqD,OAE3DhB,EAASH,EAAuBmB,IAF2B,2CAA/B,uDAKjBb,EAAY,SAACJ,GAAD,8CAA+B,WAAOC,GAAP,eAAAuC,EAAA,sEACnCtC,IAAWE,UAAUJ,GADc,OAChDiB,EADgD,OAEtDhB,EAASH,EAAkBmB,IAF2B,2CAA/B,uDAKZoR,EAAe,SAAC7S,GAAD,8CAA+B,WAAOS,GAAP,eAAAuC,EAAA,+EAEpCtC,IAAWmS,aAAa7S,GAFY,OAG/B,KADlByB,EAFiD,QAG9C4B,YACP5C,EAASH,EAAkBN,IAC3BS,EAASH,EAAuB,MAEhCG,EAASH,EAAuBmB,EAAKkE,SAAS,KAPO,gDAUvDlF,EAASH,EAAuB,KAAIgF,UAVmB,yDAA/B,uDAcfyN,EAAY,SAACC,GAAD,8CAA2B,WAAOvS,GAAP,eAAAuC,EAAA,sEAC/BtC,IAAWqS,UAAUC,GADU,OAE1B,KADlBvR,EAD4C,QAEzC4B,YACP5C,EAASH,EAAyBmB,EAAKA,KAAKkN,SAHI,2CAA3B,uDAOZwE,EAAc,SACzBpT,GADyB,8CAEqB,WAAOU,EAAUkT,GAAjB,iBAAA3Q,EAAA,6DACxCxC,EAASmT,IAAW9I,KAAKrK,OADe,SAE3BE,IAAWyS,YAAYpT,GAFI,cAGtB,KADlB0B,EAFwC,QAGrC4B,YACP5C,EAASqH,EAAetH,IAJoB,kBAMvCiB,GANuC,2CAFrB,yDAWZiQ,IA5GM,WAAmE,IAAlExR,EAAiE,uDAAzDJ,EAAcK,EAA2C,uCACrF,OAAQA,EAAOC,MACb,KAAKgT,EACH,IAAIQ,EAAU,CACZnQ,GAAI,EACJ6B,QAASnF,EAAO0T,YAChBJ,WAAY,GAEd,OAAO,2BACFvT,GADL,IAEEsT,MAAM,GAAD,mBAAMtT,EAAMsT,OAAZ,CAAmBI,MAG5B,KAAKP,EACH,OAAO,2BACFnT,GADL,IAEEH,QAASI,EAAOJ,UAGpB,KAAKF,EACL,KAAKyT,EACH,OAAO,2BACFpT,GACAC,EAAOE,SAId,KAAKkT,EACH,OAAO,2BACFrT,GADL,IAEEH,QAAQ,2BAAMG,EAAMH,SAAb,IAAsB4O,OAAQxO,EAAOwO,WAGhD,QACE,OAAOzO,M","file":"static/js/main.3d8a0b6b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loading.ba236267.svg\";","import React, { FC } from 'react';\r\nimport loadingSVG from '../../../assets/images/loading.svg';\r\n\r\nconst Preloader: FC = () => {\r\n  return <img src={loadingSVG} alt='loading'></img>\r\n}\r\n\r\nexport default Preloader","import { profileAPI } from '../api/profileAPI';\r\nimport { ProfileType } from './../types/types';\r\nimport { BaseThunkType, InferActionsTypes } from './reduxStore';\r\n\r\nconst SET_PEOPLE_PROFILE = 'SocialNetwork/peopleProfile/SET_PEOPLE_PROFILE';\r\nconst SET_STATUS = 'SocialNetwork/peopleProfile/SET_STATUS';\r\n\r\nconst initialState = {\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n};\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype InitialStateType = typeof initialState;\r\ntype ThunkType = BaseThunkType<ActionsTypes, void>;\r\n\r\nexport let peopleProfileReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case SET_PEOPLE_PROFILE: {\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    }\r\n    case SET_STATUS: {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  setPeopleProfile: (profile: any) =>\r\n    ({\r\n      type: SET_PEOPLE_PROFILE,\r\n      profile,\r\n    } as const),\r\n  setStatus: (status: string) =>\r\n    ({\r\n      type: SET_STATUS,\r\n      payload: { status },\r\n    } as const),\r\n};\r\n\r\nexport const getPeopleProfile = (userId: number): ThunkType => (dispatch) => {\r\n  const profile = profileAPI.getProfile(userId);\r\n  const status = profileAPI.getStatus(userId);\r\n  Promise.all([profile, status]).then(([profile, status]) => {\r\n    dispatch(actions.setPeopleProfile(profile));\r\n    dispatch(actions.setStatus(status));\r\n  });\r\n};\r\n// export const getPeopleProfile = (userId: number): ThunkType => async (dispatch) => {\r\n//   const profile = await profileAPI.getProfile(userId);\r\n//   dispatch(actions.setPeopleProfile(profile));\r\n//   const status = await profileAPI.getStatus(userId);\r\n//   dispatch(actions.setStatus(status));\r\n// };\r\n\r\nexport const deletePeopleProfile = (): ThunkType => (dispatch) => {\r\n  dispatch(actions.setPeopleProfile(null));\r\n  dispatch(actions.setStatus(''));\r\n};\r\n","import { UserType } from '../types/types';\r\nimport { instanse, APIResponseType } from './api';\r\n\r\nexport type GetUsersType = {\r\n  items: Array<UserType>;\r\n  error: string | null;\r\n  totalCount: number;\r\n};\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage = 1, pageSize = 10, term = '', friend: null | boolean = null) {\r\n    return instanse\r\n      .get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}` + (term? `&term=${term}`: '')  + (friend !== null? `&friend=${friend}`: ''))\r\n      .then((response) => response.data);\r\n  },\r\n  follow(userId: number) {\r\n    return instanse.post<APIResponseType>(`follow/${userId}`).then((response) => response.data);\r\n  },\r\n  unfollow(userId: number) {\r\n    return instanse.delete<APIResponseType>(`follow/${userId}`).then((response) => response.data);\r\n  },\r\n};\r\n","import { UserType, FilterType } from './../types/types';\r\nimport { usersAPI } from '../api/usersAPI';\r\nimport { InferActionsTypes, BaseThunkType } from './reduxStore';\r\n\r\nconst TOGGLE_FOLLOWING = 'SocialNetwork/users/TOGGLE_FOLLOWING';\r\nconst SET_USERS = 'SocialNetwork/users/SET_USERS';\r\nconst SET_FILTER = 'SocialNetwork/users/SET_FILTER';\r\nconst SET_CURRENT_PAGE = 'SocialNetwork/users/SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SocialNetwork/users/SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'SocialNetwork/users/TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'SocialNetwork/users/TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n  users: [] as Array<UserType>,\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: [] as Array<number>,\r\n  filter: {\r\n    term: '',\r\n    friend: null as null | boolean,\r\n  },\r\n};\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\nexport type InitialStateType = typeof initialState;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n\r\nlet usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case TOGGLE_FOLLOWING:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((u) => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: !u.followed };\r\n          }\r\n          return u;\r\n        }),\r\n      };\r\n    case SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: [...action.users],\r\n      };\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case SET_TOTAL_USERS_COUNT:\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsersCount,\r\n      };\r\n    case TOGGLE_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter((id) => id !== action.userId),\r\n      };\r\n    case SET_FILTER:\r\n      return {\r\n        ...state,\r\n        filter: action.filter,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  toggleFollowSucceded: (userId: number) =>\r\n    ({\r\n      type: TOGGLE_FOLLOWING,\r\n      userId,\r\n    } as const),\r\n  setUsers: (users: Array<UserType>) => ({ type: SET_USERS, users } as const),\r\n  setFilter: (filter: FilterType) => {\r\n    //console.log('set', filter)\r\n    return { type: SET_FILTER, filter } as const},\r\n  setCurrentPage: (currentPage: number) =>\r\n    ({\r\n      type: SET_CURRENT_PAGE,\r\n      currentPage,\r\n    } as const),\r\n  setTotalUsersCount: (totalUsersCount: number) =>\r\n    ({\r\n      type: SET_TOTAL_USERS_COUNT,\r\n      totalUsersCount,\r\n    } as const),\r\n  toggleIsFetching: (isFetching: boolean) =>\r\n    ({\r\n      type: TOGGLE_IS_FETCHING,\r\n      isFetching,\r\n    } as const),\r\n  toggleFollowingProgress: (isFetching: boolean, userId: number) =>\r\n    ({\r\n      type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n      isFetching,\r\n      userId,\r\n    } as const),\r\n};\r\n\r\nexport const requestUsers = (\r\n  currentPage: number,\r\n  pageSize: number,\r\n  filter: FilterType\r\n): ThunkType => async (dispatch) => {\r\n  dispatch(actions.setFilter(filter));\r\n  dispatch(actions.setCurrentPage(currentPage));\r\n\r\n  dispatch(actions.toggleIsFetching(true));\r\n  const data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n  dispatch(actions.toggleIsFetching(false));\r\n\r\n  dispatch(actions.setUsers(data.items));\r\n  dispatch(actions.setTotalUsersCount(data.totalCount));\r\n};\r\n\r\nexport const toggleFollow = (userId: number, followed: boolean): ThunkType => async (dispatch) => {\r\n  dispatch(actions.toggleFollowingProgress(true, userId));\r\n  let data = followed ? await usersAPI.unfollow(userId) : await usersAPI.follow(userId);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.toggleFollowSucceded(userId));\r\n  }\r\n  dispatch(actions.toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport default usersReducer;\r\n","import { sendMessage } from './../redux/chatReducer';\r\nexport type ChatMessageAPIType = {\r\n  message: string;\r\n  photo: string;\r\n  userId: number;\r\n  userName: string;\r\n};\r\nexport type StatusType = 'pending' | 'ready' | 'error';\r\n\r\ntype MessagesReceivedSubcribersType = (message: ChatMessageAPIType[]) => void;\r\ntype StatusChangedSubcribersType = (status: StatusType) => void;\r\ntype EventsNames = 'messagesReceived' | 'statusChanged';\r\n\r\nlet ws: WebSocket | null = null;\r\nconst subscribers = {\r\n  messagesReceived: [] as MessagesReceivedSubcribersType[],\r\n  statusChanged: [] as StatusChangedSubcribersType[],\r\n};\r\n\r\nconst closeHandler = () => {\r\n  notifyStatus('pending');\r\n  console.log('NETWORK_ERROR')\r\n  setTimeout(createChannel, 3000);\r\n};\r\nconst messageHandler = (e: MessageEvent) => {\r\n  const newMessages = JSON.parse(e.data);\r\n  subscribers['messagesReceived'].forEach((s) => s(newMessages));\r\n};\r\nconst openHandler = (e: Event) => {\r\n  notifyStatus('ready');\r\n};\r\nconst errorHandler = (e: Event) => {\r\n  notifyStatus('error');\r\n};\r\n\r\nconst cleanUp = () => {\r\n  ws?.removeEventListener('close', closeHandler);\r\n  ws?.removeEventListener('message', messageHandler);\r\n  ws?.removeEventListener('open', openHandler);\r\n  ws?.removeEventListener('error', errorHandler);\r\n};\r\n\r\nconst notifyStatus = (status: StatusType) => {\r\n  subscribers['statusChanged'].forEach((s) => s(status));\r\n};\r\n\r\nconst createChannel = () => {\r\n  ws?.close();\r\n  cleanUp();\r\n  ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n  notifyStatus('pending');\r\n  ws.addEventListener('close', closeHandler);\r\n  ws.addEventListener('message', messageHandler);\r\n  ws.addEventListener('open', openHandler);\r\n  ws.addEventListener('error', errorHandler);\r\n};\r\n\r\nexport const chatAPI = {\r\n  subscribe: (\r\n    eventName: EventsNames,\r\n    callback: MessagesReceivedSubcribersType | StatusChangedSubcribersType\r\n  ) => {\r\n    //@ts-ignore\r\n    subscribers[eventName].push(callback);\r\n    return () => {\r\n      //@ts-ignore\r\n      subscribers[eventName] = subscribers[eventName].filter((s) => s !== callback);\r\n    };\r\n  },\r\n  unsubscribe: (\r\n    eventName: EventsNames,\r\n    callback: MessagesReceivedSubcribersType | StatusChangedSubcribersType\r\n  ) => {\r\n    //@ts-ignore\r\n    subscribers[eventName] = subscribers[eventName].filter((s) => s !== callback);\r\n  },\r\n  sendMessage: (message: string) => {\r\n    ws?.send(message);\r\n  },\r\n  start: () => {\r\n    createChannel();\r\n  },\r\n  stop: () => {\r\n    subscribers['messagesReceived'] = [];\r\n    subscribers['statusChanged'] = [];\r\n\r\n    ws?.close();\r\n    cleanUp();\r\n  },\r\n};\r\n","import { v1 } from 'uuid';\r\nimport { chatAPI, ChatMessageAPIType, StatusType } from './../api/chatAPI';\r\nimport { BaseThunkType, InferActionsTypes } from './reduxStore';\r\n\r\nconst MESSAGES_RECEIVED = 'SocialNetwork/chat/MESSAGES_RECEIVED';\r\nconst STATUS_CHANGED = 'SocialNetwork/chat/STATUS_CHANGED';\r\nconst CLEAR_MESSAGES = 'SocialNetwork/chat/CLEAR_MESSAGES';\r\n\r\ntype ChatMessageType = ChatMessageAPIType & { id: string };\r\n\r\nlet initialState = {\r\n  messages: [] as ChatMessageType[],\r\n  status: 'pending' as StatusType,\r\n};\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype InitialStateType = typeof initialState;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n\r\nlet chatReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case MESSAGES_RECEIVED:\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages,\r\n          ...action.payload.messages.map((m) => ({ ...m, id: v1() })),\r\n        ].filter((m, index, arr) => index >= arr.length - 100),\r\n      };\r\n    case CLEAR_MESSAGES:\r\n      return {\r\n        ...state,\r\n        messages: [],\r\n      };\r\n    case STATUS_CHANGED:\r\n      return {\r\n        ...state,\r\n        status: action.payload.status,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  messageReceived: (messages: ChatMessageAPIType[]) =>\r\n    ({\r\n      type: MESSAGES_RECEIVED,\r\n      payload: { messages },\r\n    } as const),\r\n  clearMessages: () =>\r\n    ({\r\n      type: CLEAR_MESSAGES,\r\n    } as const),\r\n  statusChanged: (status: StatusType) =>\r\n    ({\r\n      type: STATUS_CHANGED,\r\n      payload: { status },\r\n    } as const),\r\n};\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null;\r\nconst newMessageHandlerCreactor = (dispatch: any) => {\r\n  if (_newMessageHandler === null) {\r\n    _newMessageHandler = (messages) => {\r\n      dispatch(actions.messageReceived(messages));\r\n    };\r\n  } else {\r\n    dispatch(actions.messageReceived([]));\r\n  }\r\n  return _newMessageHandler;\r\n};\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null;\r\nconst statusChangedHandlerCreator = (dispatch: any) => {\r\n  if (_statusChangedHandler === null) {\r\n    _statusChangedHandler = (status) => {\r\n      dispatch(actions.statusChanged(status));\r\n    };\r\n  }\r\n  return _statusChangedHandler;\r\n};\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.subscribe('messagesReceived', newMessageHandlerCreactor(dispatch));\r\n  chatAPI.subscribe('statusChanged', statusChangedHandlerCreator(dispatch));\r\n  chatAPI.start();\r\n};\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n  chatAPI.unsubscribe('messagesReceived', newMessageHandlerCreactor(dispatch));\r\n  chatAPI.unsubscribe('statusChanged', statusChangedHandlerCreator(dispatch));\r\n  dispatch(actions.clearMessages())\r\n  chatAPI.stop();\r\n};\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n  chatAPI.sendMessage(message);\r\n};\r\n\r\nexport default chatReducer;\r\n","import axios from 'axios';\r\n\r\nexport const instanse = axios.create({\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': 'e860a89d-c383-4445-923d-957883487557',\r\n  },\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n  Succes = 0,\r\n  Error = 1,\r\n}\r\n\r\nexport enum ResultCodeCaptchaEnum {\r\n  CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n  data: D,\r\n  messages: Array<string>\r\n  resultCode: RC\r\n}\r\n\r\n//refactored DAL with TS\r\n","import { instanse } from './api';\r\n\r\ntype SecurityAPIType = {\r\n  url: string | null\r\n}\r\n\r\n\r\nexport const securityAPI = {\r\n  getCaptchaUrl() {\r\n    return instanse.get<SecurityAPIType>(`security/get-captcha-url`).then((response) => response.data);\r\n  },\r\n};\r\n","import { instanse, APIResponseType, ResultCodesEnum, ResultCodeCaptchaEnum } from './api';\r\n\r\nexport type AuthUserType = {\r\n  id: number;\r\n  email: string;\r\n  login: string;\r\n};\r\n\r\nexport type LoginType = {\r\n  userId: number;\r\n};\r\n\r\nexport const authAPI = {\r\n  authUser() {\r\n    return instanse.get<APIResponseType<AuthUserType>>(`auth/me`).then((response) => response.data);\r\n  },\r\n  login(email: string, password: string, rememberMe = false, captcha = null as string | null) {\r\n    return instanse\r\n      .post<APIResponseType<LoginType, ResultCodesEnum | ResultCodeCaptchaEnum>>(`auth/login`, {\r\n        email,\r\n        password,\r\n        rememberMe,\r\n        captcha,\r\n      })\r\n      .then((response) => response.data);\r\n  },\r\n  logout() {\r\n    return instanse.delete(`auth/login`).then((response) => response.data);\r\n  },\r\n};\r\n","import { ResultCodeCaptchaEnum } from './../api/api';\r\nimport { ResultCodesEnum } from '../api/api';\r\nimport { securityAPI } from '../api/securityAPI';\r\nimport { authAPI } from '../api/authAPI';\r\nimport { InferActionsTypes, BaseThunkType } from './reduxStore';\r\nimport { getUserProfile } from './profileReducer';\r\n\r\nconst SET_USER_DATA = 'SocialNetwork/auth/SET_USER_DATA';\r\nconst SET_CAPTCHA_URL = 'SocialNetwork/auth/SET_CAPTCHA_URL';\r\n\r\nlet initialState = {\r\n  userId: null as number | null,\r\n  userPhoto: null as string | null,\r\n  login: null as string | null,\r\n  email: null as string | null,\r\n  isAuth: false,\r\n  captchaUrl: null as string | null,\r\n};\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype InitialStateType = typeof initialState;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n\r\nlet authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n    case SET_CAPTCHA_URL:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  setAuthUserData: (\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n  ) =>\r\n    ({\r\n      type: SET_USER_DATA,\r\n      payload: { userId, email, login, isAuth },\r\n    } as const),\r\n  setCaptchaUrl: (captchaUrl: string | null) => ({\r\n    type: SET_CAPTCHA_URL,\r\n    payload: { captchaUrl },\r\n  }),\r\n  setUserPhoto: (captchaUrl: string | null) => ({\r\n    type: SET_CAPTCHA_URL,\r\n    payload: { captchaUrl },\r\n  }),\r\n};\r\n\r\n//fix return data type\r\n\r\nexport const getAuthUserData = (): BaseThunkType<ActionsTypes, Promise<any>> => async (\r\n  dispatch\r\n) => {\r\n  const data = await authAPI.authUser();\r\n  if (data.resultCode === ResultCodesEnum.Succes) {\r\n    let { id, email, login } = data.data;\r\n    dispatch(actions.setAuthUserData(id, email, login, true));\r\n    dispatch(getUserProfile(id))\r\n  }\r\n  return data;\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const —ÅaptchaUrl = await securityAPI.getCaptchaUrl();\r\n  dispatch(actions.setCaptchaUrl(—ÅaptchaUrl.url));\r\n};\r\n\r\nexport const login = (\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean,\r\n  captcha: string | null\r\n): BaseThunkType<ActionsTypes, Promise<string>> => async (dispatch) => {\r\n  const data = await authAPI.login(email, password, rememberMe, captcha);\r\n  if (data.resultCode === ResultCodesEnum.Succes) {\r\n    dispatch(getAuthUserData());\r\n  }\r\n  if (data.resultCode === ResultCodeCaptchaEnum.CaptchaIsRequired) {\r\n    dispatch(getCaptchaUrl());\r\n  }\r\n  return data.messages[0];\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  const data = await authAPI.logout();\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false));\r\n    dispatch(actions.setCaptchaUrl(null));\r\n  }\r\n};\r\n\r\nexport default authReducer;","import {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  Checkbox,\r\n  Container,\r\n  CssBaseline,\r\n  FormControlLabel,\r\n  Link,\r\n  makeStyles,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport { FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport { login } from '../../redux/authReducer';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright ¬© '}\r\n      <Link color=\"inherit\" href=\"https://github.com/VHarastei\">\r\n        VH\r\n      </Link>\r\n      {' 2021.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst loginSchema = Yup.object().shape({\r\n  password: Yup.string().min(6, 'Too Short!').max(50, 'Too Long!').required('Required'),\r\n  email: Yup.string().email('Invalid email').required('Required'),\r\n  signInError: Yup.boolean(),\r\n  captcha: Yup.string().when('signInError', {\r\n    is: (captcha: any) => captcha,\r\n    then: Yup.string().required('Required'),\r\n    otherwise: Yup.string(),\r\n  }),\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  card: {\r\n    backgroundColor: '#ffcccb',\r\n  },\r\n  cardContent: {\r\n    height: '40px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n}));\r\n\r\n// const helperTextStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     margin: 4,\r\n//     '&$error': {\r\n//       color: 'darkred',\r\n//       fontSize: '16px',\r\n//     },\r\n//   },\r\n//   error: {}, //<--this is required to make it work\r\n// }));\r\n// FormHelperTextProps={{ classes: helperText }}\r\n\r\nexport default function SignIn() {\r\n  const classes = useStyles();\r\n  const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Formik\r\n      validationSchema={loginSchema}\r\n      initialValues={{ email: '', password: '', rememberMe: false, captcha: '' }}\r\n      onSubmit={async (formData, { setStatus }) => {\r\n        let signInError = await dispatch(\r\n          login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n        );\r\n        if (!!signInError) setStatus({ signInError });\r\n      }}\r\n    >\r\n      {({ errors, touched, status = { signInError: null } }) => (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign in\r\n            </Typography>\r\n            <Form className={classes.form}>\r\n              <Field\r\n                color=\"primary\"\r\n                as={TextField}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                error={Boolean(errors.email)}\r\n                helperText={touched.email ? errors.email : ''}\r\n              />\r\n              <Field\r\n                color=\"primary\"\r\n                as={TextField}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                error={Boolean(errors.password)}\r\n                helperText={touched.password ? errors.password : ''}\r\n              />\r\n              <Field\r\n                as={FormControlLabel}\r\n                name=\"rememberMe\"\r\n                control={<Checkbox color=\"primary\" />}\r\n                label=\"Remember me\"\r\n              />\r\n              <SignInErrorBox captchaUrl={captchaUrl} signInError={status.signInError} />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                fullWidth\r\n                className={classes.submit}\r\n              >\r\n                Sign in\r\n              </Button>\r\n            </Form>\r\n          </div>\r\n          <Box mt={2}>\r\n            <Copyright />\r\n          </Box>\r\n        </Container>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\ntype SignInErrorPropsType = {\r\n  captchaUrl: any;\r\n  signInError: any;\r\n};\r\n\r\nconst SignInErrorBox: FC<SignInErrorPropsType> = ({ captchaUrl, signInError }) => {\r\n  const classes = useStyles();\r\n\r\n  return captchaUrl ? (\r\n    <Box>\r\n      <Card>\r\n        <CardMedia\r\n          style={{\r\n            height: 0,\r\n            paddingTop: '30%',\r\n            marginRight: '20%',\r\n            marginLeft: '10%',\r\n          }}\r\n          image={captchaUrl}\r\n          title=\"Captcha\"\r\n        />\r\n      </Card>\r\n      <Field\r\n        color=\"primary\"\r\n        as={TextField}\r\n        variant=\"outlined\"\r\n        margin=\"normal\"\r\n        required\r\n        fullWidth\r\n        id=\"captcha\"\r\n        label=\"Captcha\"\r\n        name=\"captcha\"\r\n        type=\"text\"\r\n        error={signInError}\r\n        helperText={'Required'}\r\n      />\r\n    </Box>\r\n  ) : (\r\n    signInError && (\r\n      <Card className={classes.card}>\r\n        <CardContent className={classes.cardContent}>\r\n          <Typography align=\"center\" component=\"h1\" variant=\"h6\">\r\n            {signInError}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  );\r\n};\r\n","import { Avatar, IconButton, Paper } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport SupervisedUserCircleIcon from '@material-ui/icons/SupervisedUserCircle';\r\nimport * as React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { logout } from '../../redux/authReducer';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: `space-between`,\r\n    alignItems: 'center',\r\n    margin: '0 16px',\r\n  },\r\n  logo: {\r\n    display: 'inline',\r\n    userSelect: 'none',\r\n  },\r\n  login: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: `space-between`,\r\n  },\r\n  userName: {\r\n    display: 'inline',\r\n    color: 'gray',\r\n    margin: '0 16px 0 8px',\r\n  },\r\n  avatar: {\r\n    color: '#fff',\r\n    backgroundColor: '#f3673b',\r\n  },\r\n  tabs: {\r\n    marginRight: -150\r\n  }\r\n});\r\n\r\nexport const NavBar = () => {\r\n  const classes = useStyles();\r\n\r\n  let initialTabValue = 0;\r\n  let path = useHistory().location.pathname;\r\n\r\n  let pathSymbols = path.split('');\r\n  pathSymbols.forEach((item, index) => {\r\n    if (item === '/' && index !== 0) {\r\n      pathSymbols.splice(index);\r\n    }\r\n  });\r\n  path = pathSymbols.join('');\r\n\r\n  let arrPath = ['/profile', '/chat', '/friends', '/people'];\r\n  arrPath.forEach((item, index) => {\r\n    if (item === path) initialTabValue = index;\r\n  });\r\n\r\n  const [tabValue, setTabValue] = React.useState(initialTabValue);\r\n  const login = useSelector((state: AppStateType) => state.auth.login) as string;\r\n  const photo = useSelector((state: AppStateType) => state.profilePage.profile?.photos.small);\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newTabValue: number) => {\r\n    setTabValue(newTabValue);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const logoutUser = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  return (\r\n    <Paper color=\"secondary\">\r\n      <div className={classes.root}>\r\n        <SupervisedUserCircleIcon\r\n          color=\"secondary\"\r\n          className={classes.logo}\r\n          style={{ fontSize: 48 }}\r\n        ></SupervisedUserCircleIcon>\r\n\r\n        <Tabs\r\n         className={classes.tabs}\r\n          value={tabValue}\r\n          onChange={handleChange}\r\n          indicatorColor=\"secondary\"\r\n          textColor=\"secondary\"\r\n          centered\r\n        >\r\n          <Tab label=\"Home\" to=\"/profile\" component={Link} />\r\n          <Tab label=\"Chat\" to=\"/chat\" component={Link} />\r\n          <Tab label=\"Friends\" to=\"/friends\" component={Link} />\r\n          <Tab label=\"Find people\" to=\"/people\" component={Link} />\r\n        </Tabs>\r\n        <Box className={classes.login}>\r\n          <Avatar className={classes.avatar} alt={login} src={photo}>\r\n            {login[0]}\r\n          </Avatar>\r\n          <Typography className={classes.userName} variant=\"h5\">\r\n            {login}\r\n          </Typography>\r\n          <IconButton onClick={logoutUser} edge=\"start\" aria-label=\"menu\">\r\n            <ExitToAppIcon color=\"secondary\" />\r\n          </IconButton>\r\n        </Box>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n","import { getAuthUserData } from './authReducer';\r\nimport { InferActionsTypes, BaseThunkType } from './reduxStore';\r\n\r\n//actions{} infer\r\n\r\nconst INITIALIZED_SUCCES = 'SocialNetwork/app/INITIALIZED_SUCCES';\r\n\r\nlet initialState = {\r\n  initialized: false,\r\n};\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype InitialStateType = typeof initialState;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n\r\nlet appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCES:\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  initializedSucces: () => ({\r\n    type: INITIALIZED_SUCCES,\r\n  } as const)\r\n}\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch) => {\r\n  await dispatch(getAuthUserData());\r\n  dispatch(actions.initializedSucces());\r\n};\r\n\r\nexport default appReducer;\r\n","import React, { Suspense } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { compose } from 'redux';\nimport './App.css';\nimport Preloader from './components/common/Preloader/Preloader';\nimport SignIn from './components/SignInPage/SignInPage';\nimport { NavBar } from './components/NavBar/NavBar';\nimport { initializeApp } from './redux/appReducer';\nimport { AppStateType } from './redux/reduxStore';\nconst MyProfilePage = React.lazy(() => import('./components/ProfilePage/MyProfilePage'));\nconst ChatPage = React.lazy(() => import('./pages/ChatPage/ChatPage'));\nconst FindPeoplePage = React.lazy(() => import('./components/Users/FindPeoplePage'));\nconst Friends = React.lazy(() => import('./components/Friends/Friends'));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\ntype DispatchPropsType = {\n  initializeApp: () => void;\n};\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n  componentDidMount() {\n    this.props.initializeApp();\n  }\n\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />;\n    }\n    if (!this.props.isAuth) {\n      return <SignIn />;\n    }\n    return (\n      <div className=\"app-wrapper\">\n        <NavBar />\n        <Suspense fallback={<Preloader />}>\n          <div className=\"app-wrapper-content\">\n            <Switch>\n              <Route path=\"/\" exact>\n                <Redirect to=\"/profile\" />\n              </Route>\n              <Route path=\"/profile/:userId?\" render={() => <MyProfilePage />} />\n              <Route path=\"/chat\" render={() => <ChatPage />} />\n              <Route path=\"/friends/:userId?\" render={() => <Friends />} />\n              <Route  path=\"/people/:userId?\" render={() => <FindPeoplePage />} />\n              \n              <Route path=\"*\" render={() => <div>404 NOT FOUND </div>} />\n              {/* <Redirect exact from=\"/\" to=\"/profile\" /> */}\n            </Switch>\n          </div>\n        </Suspense>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.initialized,\n  isAuth: state.auth.isAuth,\n});\n\nexport default compose(connect(mapStateToProps, { initializeApp })(App));\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { peopleProfileReducer } from './peopleProfileReducer';\r\nimport { applyMiddleware, combineReducers, createStore, compose, Action } from 'redux';\r\nimport authReducer from './authReducer';\r\nimport profileReducer from './profileReducer';\r\nimport usersReducer from './usersReducer';\r\nimport appReducer from './appReducer';\r\nimport chatReducer from './chatReducer';\r\n\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  peopleProfile: peopleProfileReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  app: appReducer,\r\n  chat: chatReducer,\r\n});\r\n\r\ntype rootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<rootReducerType>;\r\n\r\n//type PropertiesTypes<T> = T extends {[key: string]: infer U}  ? U : never;\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[])=> infer U }? U : never;\r\nexport type BaseThunkType<A extends Action, R = Promise<void> > = ThunkAction<R, AppStateType, unknown, A>;\r\n\r\nconst composeEnhancers =\r\n  //@ts-ignore\r\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? //@ts-ignore\r\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose;\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(thunkMiddleware));\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\n//window.store = store;\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/reduxStore';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#0073FF'\n      //main: '#fff'\n    },\n    secondary: {\n      main: '#f3673b'\n      //main: '#fff'\n    },\n    \n  },\n  overrides: {\n    // Style sheet name ‚öõÔ∏è\n    MuiButton: {\n      // Name of the rule\n      text: {\n        // Some CSS\n        color: 'red',\n      },\n    },\n  },\n  //'&:hover': { background: '#ff3300' },\n});\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n    <MuiThemeProvider theme={theme}>\n      <App />\n      </MuiThemeProvider>\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n);\nreportWebVitals();\n","import { PhotosType, ProfileType } from '../types/types';\r\nimport { instanse, APIResponseType } from './api';\r\n\r\ntype SavePhotoType = {\r\n  photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: number) {\r\n    return instanse.get<ProfileType>(`profile/${userId}`).then((response) => response.data);\r\n\r\n  },\r\n  getStatus(userId: number) {\r\n    return instanse.get<string>(`profile/status/${userId}`).then((response) => response.data);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instanse.put<APIResponseType>(`profile/status`, { status }).then((response) => response.data);\r\n  },\r\n  savePhoto(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('image', file);\r\n    return instanse\r\n      .put<APIResponseType<SavePhotoType>>(`profile/photo`, formData, {\r\n        headers: {\r\n          'Content-type': 'multipart/form-data',\r\n        },\r\n      })\r\n      .then((response) => response.data);\r\n  },\r\n  saveProfile(profile: ProfileType) {\r\n    return instanse.put<APIResponseType>(`profile`, profile).then((response) => response.data);\r\n  },\r\n};\r\n","import { PhotosType, PostsType, ProfileType } from './../types/types';\r\nimport { profileAPI } from '../api/profileAPI';\r\nimport { InferActionsTypes, BaseThunkType } from './reduxStore';\r\n\r\nconst ADD_POST = 'SocialNetwork/profile/ADD-POST';\r\nconst SET_USER_PROFILE = 'SocialNetwork/profile/SET_USER_PROFILE';\r\nconst SET_STATUS = 'SocialNetwork/profile/SET_STATUS';\r\nconst SET_STATUS_ERROR = 'SocialNetwork/profile/SET_STATUS_ERROR';\r\nconst SAVE_PHOTO_SUCCESS = 'SocialNetwork/profile/SAVE_PHOTO_SUCCESS';\r\n\r\nconst initialState = {\r\n  posts: [\r\n    { id: 1, message: '111 Post', likesCount: 2 },\r\n    { id: 2, message: '22Post', likesCount: 5 },\r\n    { id: 3, message: '111432 Post', likesCount: 8 },\r\n    { id: 4, message: '11121 Post', likesCount: 5 },\r\n  ] as Array<PostsType>,\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n  statusError: ''\r\n};\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype InitialStateType = typeof initialState;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n\r\nlet profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case ADD_POST: {\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.newPostText,\r\n        likesCount: 0,\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n      };\r\n    }\r\n    case SET_USER_PROFILE: {\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    }\r\n    case SET_STATUS:\r\n    case SET_STATUS_ERROR: {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n\r\n    case SAVE_PHOTO_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  addPost: (newPostText: string) =>\r\n    ({\r\n      type: ADD_POST,\r\n      newPostText,\r\n    } as const),\r\n  setUserProfile: (profile: any) =>\r\n    ({\r\n      type: SET_USER_PROFILE,\r\n      profile,\r\n    } as const),\r\n  setStatus: (status: string) =>\r\n    ({\r\n      type: SET_STATUS,\r\n      payload: { status },\r\n    } as const),\r\n  setStatusError: (statusError: string) =>\r\n    ({\r\n      type: SET_STATUS_ERROR,\r\n      payload: { statusError },\r\n    } as const),\r\n  savePhotoSuccess: (photos: PhotosType) =>\r\n    ({\r\n      type: SAVE_PHOTO_SUCCESS,\r\n      photos,\r\n    } as const),\r\n};\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getProfile(userId);\r\n  dispatch(actions.setUserProfile(data));\r\n};\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getStatus(userId);\r\n  dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0) {\r\n      dispatch(actions.setStatus(status));\r\n      dispatch(actions.setStatusError(''));\r\n    } else {\r\n      dispatch(actions.setStatusError(data.messages[0]));\r\n    }\r\n  } catch (err) {\r\n    dispatch(actions.setStatusError(err.message));\r\n  }\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.savePhoto(file);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.savePhotoSuccess(data.data.photos));\r\n  }\r\n};\r\n\r\nexport const saveProfile = (\r\n  profile: ProfileType\r\n): BaseThunkType<ActionsTypes, Promise<any>> => async (dispatch, getState) => {\r\n  const userId = getState().auth.userId as number;\r\n  const data = await profileAPI.saveProfile(profile);\r\n  if (data.resultCode === 0) {\r\n    dispatch(getUserProfile(userId));\r\n  }\r\n  return data;\r\n};\r\n\r\nexport default profileReducer;\r\n"],"sourceRoot":""}