{"version":3,"sources":["components/Login/Login.module.css","components/Login/Login.jsx","utils/validators/validators.js"],"names":["module","exports","connect","state","isAuth","auth","loginError","dispatch","onSubmit","formData","login","email","password","rememberMe","then","err","FORM_ERROR","messages","props","to","render","submitError","handleSubmit","name","validate","composeValidators","required","maxLength","input","meta","className","s","fieldControl","error","type","placeholder","touched","value","undefined","max","length","validators","reduce","validator"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,MAAQ,uB,0ICkFXC,uBAjBS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,OACnBE,WAAYH,EAAME,KAAKC,eAGE,SAACC,GAC1B,MAAO,CACLC,SAAU,SAACC,GACT,OAAOF,EACLG,YAAMD,EAASE,MAAOF,EAASG,SAAUH,EAASI,aAClDC,MAAK,SAACC,GACN,OAAO,eAAGC,IAAaD,EAAIE,SAAS,WAM7Bf,EAtED,SAACgB,GACb,OAAIA,EAAMd,OACD,cAAC,IAAD,CAAUe,GAAG,aAIpB,gCACE,uCACA,cAAC,IAAD,CACEX,SAAUU,EAAMV,SAChBY,OAAQ,gBAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACN,uBAAMd,SAAUc,EAAhB,UACE,cAAC,IAAD,CACEC,KAAK,QACLC,SAAUC,YAAkBC,IAAUC,YAAU,KAFlD,SAIG,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,sBAAKC,UAAWC,IAAEC,aAAe,IAAMD,IAAEE,MAAzC,UACE,mCAAOC,KAAK,OAAOC,YAAY,SAAYP,IAC1CC,EAAKI,OAASJ,EAAKO,SAAW,+BAAOP,EAAKI,cAIjD,cAAC,IAAD,CACEV,KAAK,WACLC,SAAUC,YAAkBC,IAAUC,YAAU,KAFlD,SAIG,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,sBAAKC,UAAWC,IAAEC,aAAe,IAAMD,IAAEE,MAAzC,UACE,mCAAOC,KAAK,WAAWC,YAAY,YAAeP,IACjDC,EAAKI,OAASJ,EAAKO,SAAW,+BAAOP,EAAKI,cAIjD,cAAC,IAAD,CAAOV,KAAK,aAAaW,KAAK,WAA9B,SACG,gBAAGN,EAAH,EAAGA,MAAH,EAAUC,KAAV,OACC,gCACE,+CACA,mCAAOK,KAAK,YAAeN,UAIhCP,GAAe,qBAAKS,UAAWC,IAAEE,MAAlB,SAA0BZ,IAC1C,8BACE,wBAAQa,KAAK,SAAb,mC,gCCzDd,sGAAO,IAAMR,EAAW,SAACW,GAAD,OAAYA,OAAQC,EAAY,YAC3CX,EAAY,SAACY,GAAD,OAAS,SAACF,GAAD,OAClCA,GAASA,EAAMG,QAAUD,EAAzB,4BAAoDA,EAApD,iBAAoED,IACvDb,EAAoB,sCAAIgB,EAAJ,yBAAIA,EAAJ,uBAAmB,SAACJ,GAAD,OAClDI,EAAWC,QAAO,SAACT,EAAOU,GAAR,OAAsBV,GAASU,EAAUN,UAAQC","file":"static/js/7.1a6c076a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Login_error__2_tWy\"};","import React from 'react';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  composeValidators,\r\n  maxLength,\r\n  required,\r\n} from '../../utils/validators/validators';\r\nimport s from './Login.module.css';\r\nimport { login } from '../../redux/authReducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { FORM_ERROR } from 'final-form';\r\n\r\nconst Login = (props) => {\r\n  if (props.isAuth) {\r\n    return <Redirect to=\"/profile\" />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>login</h1>\r\n      <Form\r\n        onSubmit={props.onSubmit}\r\n        render={({ submitError, handleSubmit }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <Field\r\n              name=\"email\"\r\n              validate={composeValidators(required, maxLength(30))}\r\n            >\r\n              {({ input, meta }) => (\r\n                <div className={s.fieldControl + ' ' + s.error}>\r\n                  <input type=\"text\" placeholder=\"Email\" {...input} />\r\n                  {meta.error && meta.touched && <span>{meta.error}</span>}\r\n                </div>\r\n              )}\r\n            </Field>\r\n            <Field\r\n              name=\"password\"\r\n              validate={composeValidators(required, maxLength(30))}\r\n            >\r\n              {({ input, meta }) => (\r\n                <div className={s.fieldControl + ' ' + s.error}>\r\n                  <input type=\"password\" placeholder=\"Password\" {...input} />\r\n                  {meta.error && meta.touched && <span>{meta.error}</span>}\r\n                </div>\r\n              )}\r\n            </Field>\r\n            <Field name=\"rememberMe\" type=\"checkbox\">\r\n              {({ input, meta }) => (\r\n                <div>\r\n                  <span>Remember me</span>\r\n                  <input type=\"checkbox\" {...input} />\r\n                </div>\r\n              )}\r\n            </Field>\r\n            {submitError && <div className={s.error}>{submitError}</div>}\r\n            <div>\r\n              <button type=\"submit\">Submit</button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      ></Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  loginError: state.auth.loginError,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSubmit: (formData) => {\r\n      return dispatch(\r\n        login(formData.email, formData.password, formData.rememberMe)\r\n      ).then((err) => {\r\n        return { [FORM_ERROR]: err.messages[0] };\r\n      });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","export const required = (value) => (value ? undefined : 'Required');\r\nexport const maxLength = (max) => (value) => \r\nvalue && value.length >= max ? `Maximum length is ${max} symbols` : undefined;\r\nexport const composeValidators = (...validators) => (value) =>\r\n  validators.reduce((error, validator) => error || validator(value), undefined);\r\n"],"sourceRoot":""}